ВСТУП


Харчова промисловість є однією з найбільших частин світового споживчого ринку. Через те, що в кожної людини є потреба в їжі ця сфера завжди користуватиметься попитом. Опитування громадської думки в різних куточках світу показують, що кафе та ресторани входять в першу трійку популярних видів дозвілля після шопінгу та відвідування кінотеатру. У деяких країнах люди вважають, що краще власноруч приготувати їжу вдома, в той час як в інших не втрачають актуальності швидка їжа, кафе та ресторани. Світова статистика така, що ринок харчування приносить понад 2 трильйона доларів чистого прибутку. Так як громадське харчування вже давно вважається однією з найприбутковіших сфер у світі, це створює підґрунтя для інвестицій та сприяє їм. Прикладами є Aramark, Sysco Corporation і Elior Group, які працюють у низці країн світу, а також KFC, чиї прибутки щороку зростали до 8 відсотків у 2020 році.
Аналізуючи ситуацію на ринку, відчувається серйозний дефіцит закладів середнього класу. Ця ринкова ніша закріплена за сектором швидкого харчування. Ресторани японської кухні, що пропонують всім відомі суші продовжують користуватися великою популярністю, і їхня кількість постійно зростає. Початок повномасштабного вторгнення ускладнив нормальну роботу закладів громадського харчування; в деяких містах, на жаль, вони навіть були змушені повністю закритися. Пандемія коронавірусу теж не найкращим чином вплинула на харчову промисловість. Для того, щоб зекономити час, підвищити безпеку та зменшити контакти між людьми має сенс розробити програмне забезпечення, яке дозволить замовляти їжу та напої з ресторанів. Це вирішує проблеми відстоювання в довгих чергах, щоб переглянути меню (у випадку з фаст-фудом) або відвідати кілька закладів, перш ніж знайти той, який пропонує всі страви, які людина хоче спробувати. Водночас, відповідні заклади не втрачають клієнтів — вони продовжуватимуть виробляти продукцію та отримувати прибуток, а більше користувачів зможуть ознайомитися з їхньою пропозицією та порівняти її з конкурентами. Серверна частина буде розроблена за допомогою фреймворку Django. Клієнтська сторона — із використанням бібліотеки React. Мобільний додаток був розроблений з використанням мови програмування Kotlin. В якості системи управління базою даних використовувався PostgreSQL.


1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ


Ця програмна система може бути цінною для світової індустрії громадського харчування, оскільки вона революціонізує спосіб, у який клієнти замовляють і споживають їжу в закладах громадського харчування. Проаналізувавши ринок стало зрозуміло, що в сучасних реаліях існує багато аналогів та конкурентів. В основному це служби доставки їжі, які зручно та швидко доставляють їжу до дверей клієнта. Таким чином, людині навіть не потрібно залишати своє помешкання, щоб забрати замовлену їжу. Ці послуги здобувають популярність у всьому світі, що стало особливо очевидним під час пандемії коронавірусу. Багато закладів змушені переорієнтуватися на видачу готових страв, не надаючи можливості для внутрішнього вживання.


1.1 Аналіз аналогів


MisterAM, Bolt Food, DoorDash, Glovo, UberEats, Just Eat, Deliveroo, Grubhub, FoodPanda, Zomato та інші — відомі приклади цих сервісів. Glovo є гарним прикладом цього принципу. Компанія має штат курʼєрів, які можуть приймати замовлення в мобільному додатку та обирати найбільш вигідні, наприклад, за відстанню (вони обирають ті, де клієнт знаходиться найближче до них). Працівники доставляють їжу з партнерських точок в ізотермічних пакетах та самі вирішують, скільки годин витрачати на роботу. Основна перевага розроблюваної програмної системи над іншими сервісами полягає в тому, що вона не тільки збирає дані з ресторанів, але й здійснює інтелектуальний пошук закладів харчування, пропонує всі доступні користувачеві страви, визначає вміст кожного інгредієнта при замовленні, додає їжу і напої, пропонує страви або напої на основі минулої активності користувача і знаходить страви на основі інгредієнтів, обраних користувачем. Важливу роль в програмній системі відіграє розумний пристрій, який би автоматизував процес приготування їжі. Виходить, що конкурентами можна вважати кухарів, які готують їжу, та офіціантів, які пакують готову їжу та віддають її споживачам. Вони можуть залишитися без роботи через автоматизацію, яку пропонує розумний пристрій. Перевага системи полягає в тому, що людям більше не потрібно втручатися навіть під час приготування їжі, що знижує ризик інфікування клієнтів.
Іншим аналогом є харчові торгові автомати, які, залежно від моделі, можуть використовувати мікрохвильовий модуль лише для розігріву готової їжі або для приготування їжі з частково підготовлених продуктів. Найчастіше такі автомати використовуються для продажу хот-догів. Якщо порівнювати з технологією, запропонованою в цьому дослідженні, торгові автомати здатні виконувати лише базові завдання. Щоб проект продовжувався, він приносити прибуток. Кожне замовлення оплачується готівкою, тому на суму, вказану в чеку клієнта, впливає той факт, що приготування здійснювалося за допомогою машини. За кожне замовлення сплачується певна комісія, а оскільки виконання замовлень є основною метою системи, ці операції відбуваються досить часто, що забезпечує хороший прибуток.


1.2 Бізнес-потреби


Програмна система для кейтерингу задовольнить наступні потреби споживачів:
-	можливість замовити приготування їжі на певний час;
-	пошук місць із автоматизованими системами;
-	отримати актуальну інформацію про продукти компанії та обладнання, на якому можна приготувати страву;
-	втамувати голод;
-	почитати відгуки про якість приготування різних страв;
-	обрати склад страви із потрібним вмістом інгредієнтів, який дозволено для тієї чи іншої особи;
-	пошук страв, що містять інгредієнти, які клієнт хотів би спробувати;
-	зниження ризику захворіти;
-	прискорення процесу приготування;
-	реклама та просування продукції компаній, які встановлюють торгові автомати у своїх приміщеннях.
Виходячи з цих потреб, клієнтів можна розділити на дві групи: люди, які хочуть швидко отримати готову до вживання їжу, та компанії, які встановлять торгові автомати для приготування та пакування таких страв. Функції керування системою повністю доступні адміністратору. Окрім резервного копіювання даних і відновлення їх у разі збою в роботі програми, адміністратор також відповідає за управління сертифікатами, тобто стежить за терміном дії SSL-сертифіката та оновлює його за необхідності. Однак головним завданням цієї людини є управління системними даними. Вона керує даними в таблицях бази даних, що включає додавання нових даних до таблиць, зміну старих таблиць, видалення непотрібних сутностей і перевірку всіх даних. Користувач з безкоштовним акаунтом може використовувати базові функції приготування їжі. Він може отримати доступ до меню конкретного ресторану, сканувавши QR-код в додатку для смартфона, встановленому в ресторані. Після того він може переглянути всі страви, які його цікавлять, використовуючи фільтри, сортування та пошук, дізнатися про них, ідентифікувати їх вміст і додати до свого кошика. Потім вони можуть обробити страви, які вже знаходяться в кошику, оформити замовлення і чекати на їх приготування і доступність відповідно до черги. Користувачі можуть шукати ресторани в певній місцевості, які можуть приготувати обрані ними страви, а також страви, приготовані з обраних ними інгредієнтів. Користувач, що має платну підписку може зробити онлайн-замовлення продуктів на певний період часу і має доступ до першої частини черги, де можуть чекати лише безкоштовні підписники.

 
2 ПОСТАНОВКА ЗАДАЧІ


Клієнтська та серверна частини веб-сайту, мобільний додаток та розумний пристрій створюють програмну систему для попереднього замовлення їжі та напоїв. Всі елементи системи будуть прості у використанні.


2.1 Основний функціонал системи


Для програмної системи для попереднього замовлення їжі та напоїв потрібно розробити веб-сайт (клієнт і сервер), мобільний додаток і розумний пристрій для введення страв з окремих інгредієнтів. Функції різних секцій компонентів системи пояснюються нижче:
Серверна частина:
-	авторизація та реєстрація користувачів в системі ;
-	надання захисту персональних даних, зокрема шляхом використання веб-токенів для автентифікації, управління правами користувачів на декількох рівнях, реєстрації змін та отримання SSL-сертифікату. Токени доступу створюються, коли введено правильні дані, зберігаються на пристрої клієнта та надсилаються в заголовку кожного запиту. Токени оновлення використовуються для генерації нового токена доступу після закінчення терміну дії попереднього. Перевага цього методу автентифікації полягає в тому, що токени не потрібно зберігати на сервері і вони надзвичайно безпечні, оскільки підписані цифровим підписом. Так як використовується асиметричне шифрування з відкритим ключем, сертифікат SSL захищає конфіденційність обміну даними між клієнтом і сервером через протокол TCP/IP;
-	управління програмною системою (додавання, зміна та видалення страв, інгредієнтів та постачальників, асоціювання страв з машинами, які можуть їх приготувати, користувачами та створення їх облікових записів, збереження налаштувань та даних, експорт та імпорт налаштувань, управління сертифікатами). Для того, щоб обробляти сертифікати, необхідно перевіряти їхню дійсність і нагадувати про необхідність їх поновлення після закінчення терміну дії. Резервне копіювання може здійснюватися відповідно до інструкцій адміністратора і з заданою періодичністю, з можливістю відновлення обраної копії бази даних у разі необхідності (у разі виникнення проблеми);
-	застосування моделей даних для надання клієнту необхідної інформації (страви, інгредієнти, рейтинги, вміст кошика, черги, постачальники, які приєдналися до проекту, а також дані користувачів) у встановленому форматі (доставка через API);
-	обробка GET, POST, PUT, PATCH і DELETE запитів, які надходять на сервер (видалення або зміна вмісту кошика для покупок; отримання вмісту каталогу продуктів, інформації про конкретну страву; отримання списку ресторанів; отримання черги і створення замовлення; додавання, редагування або видалення даних);
-	підбір страв з бажаними інгредієнтами (буде розроблена формула, яка оцінюватиме склад страв з переліком бажаних користувачем інгредієнтів і пропонуватиме можливі варіанти залежно від того, чи дотримані вимоги);
-	надання користувачам рекомендацій на основі їхньої попередньої активності.
Клієнтська частина:
-	надання відповідних форм для введення персональних даних для реєстрації та авторизації;
-	локалізація (можливість обрати українську або англійську мови інтерфейсу користувача для відображення всього контенту сайту, окрім інформації, отриманої шляхом запиту до бази даних); для кожної мови готується файл у форматі JSON з відповідним текстом;
-	інтернаціоналізація (при відображенні технічних характеристик враховується формат дати і часу та система вимірювання: американська або міжнародна). Дата і час відображаються у форматі, що відповідає вибраній мові та поточному часовому поясу. Вага може відображатися в одиницях, що відповідають різним країнам. Вага відображається в грамах, якщо мова інтерфейсу користувача - українська; в футах, якщо мова інтерфейсу користувача — англійська. Залежно від обраної мови, ціна в кошику також відображається в доларах або гривнях;
-	можливість розміщення замовлення на фіксований період;
-	пошук ресторанів, що пропонують послуги самовивозу їжі;
-	список страв з інформацією про кожну з них, включаючи назву, фото, опис, перелік інгредієнтів, рейтинг, вагу, енергетичну цінність та ціну;
-	можливість користувачеві здійснювати пошук шляхом введення запиту в пошукове поле, а також сортувати та фільтрувати відображені дані за певними показниками;
-	зручний засіб для пошуку рецептів за інгредієнтами, обраними користувачем;
-	редагувати вміст кошика (видаляти товари або змінювати їх кількість);
-	адміністративний інтерфейс, який забезпечує зручне виконання серверних функцій адміністрування.
Мобільний додаток:
-	забезпечення форм для введення даних, необхідних для процедур реєстрації та авторизації;
-	ознайомитися з переліком техніки, встановленої в ресторані, та страв, які вона може приготувати;
-	локалізація (можливість вибору між українською та англійською мовами для відображення всього контенту сайту, за винятком даних, отриманих з бази даних; для кожної мови створюється файл a.json, що містить текстові елементи відповідних частин сайту);
-	інтернаціоналізація (відображення формату дати і часу, систем вимірювання, таких як американська або міжнародна, в залежності локації та уподобань користувача). Дата і час автоматично визначаються за поточним часовим поясом і відображаються у форматі, відповідному обраній мові. Також можливе відображення ваги в специфічних для країни одиницях (наприклад, українською мовою вага відображається у грамах, англійською - у фунтах). В залежності від обраної мови, ціна кошика відображається в доларах або гривнях;
-	відображення меню страв у доступному форматі (назва, фото, опис, рейтинг, маса, тип страви, ціна);
-	можливість ввести пошуковий запит у поле пошуку, а також сортувати та фільтрувати дані, що відображаються, за обраними критеріями;
-	робота з товарами в кошику (наприклад, видалення).
Розумний пристрій:
-	збір їжі. У цьому проєкті використовується схема, що симулює процес приготування страв. Коли різні інгредієнти поєднуються, RGB-світлодіод загоряється відповідним кольором. Тип дії визначає, який світлодіод спрацює: один колір для наливання; інший колір для нарізання або перевертання; знову інший для іншої дії. RGB-світлодіод індикує, коли інгредієнт зазнав змін;
-	пакування харчових продуктів. Процес пакування має світловий індикатор, який загоряється, показуючи, що відбувається саме ця операція;
-	моніторинг запасів їжі в закладі харчування. Коли інгредієнтів не вистачає, світлодіодний індикатор вказує на необхідність поповнення запасів, щоб система працювала належним чином;
-	керування чергою. Перед початком приготування страви на серверний компонент надсилається GET-запит для отримання інформації про нове замовлення;


2.2	 Обмеження та винятки 


У першій версії програмної системи планувалося створити універсальний пристрій, здатний готувати всі страви, доступні в системі, але на цьому шляху виникло кілька перешкод. По-перше, такий пристрій стає занадто громіздким. По-друге, деякі страви не підходять для спільного зберігання. Загалом, система стала б настільки незрозумілою, що її ефективність неодмінно знизилася б. Щодо макета, то було б важко підібрати серію кольорів, які б чітко відрізнялися один від одного, щоб імітувати використання різних інгредієнтів.
Були також плани відображати статус замовлень у мобільному додатку, але від цієї ідеї відмовилися, оскільки сам розумний пристрій був розроблений таким чином, щоб відображати цю інформацію у максимально зручному для користувача вигляді.


2.3 Допущення та залежності 


Припущення:
-	для того, щоб автоматизовані системи харчових продуктів були успішними на початковому етапі розвитку, вони потребують значної фінансової підтримки з боку інвесторів (як мінімум пʼять тисяч доларів США в перший місяць);
-	користувачі впевнені, що машина може приготувати страву так само ефективно, як і кухар;
-	клієнтам, які хочуть скористатися послугою, знадобиться смартфон на базі Android або комп'ютер з останньою версією операційної системи, що дозволить їм встановити найновіші версії найпопулярніших веб-браузерів;
-	розумний пристрій має постійний доступ до мережі та зʼєднання з інтернетом.
Залежності:
-	підключення до Інтернету;
-	наскільки швидкою є передача даних між клієнтом і сервером та наскільки стабільне інтернет-з'єднання;
-	швидкість приготування страви;
-	асортимент страв, які може приготувати пристрій;
-	завантаженості серверу;
-	компаній-партнерів, які встановили технологію у своїх закладах громадського харчування;
-	наскільки сучасне програмне та апаратне забезпечення клієнта;
-	наскільки якісними є харчові інгредієнти.


2.4 Обсяг подальших випусків


Ми плануємо розширити цей функціонал у наступних версіях системи. Щоб користувачеві було легше орієнтуватися, всі компанії-партнери спочатку можуть бути відображені на карті. Крім того, найближче місцезнаходження можна визначити за допомогою GPS та поточного місцезнаходження користувача. Також буде створено веб-сайт, де люди зможуть подавати свої улюблені страви, які не підтримуються технологіями. Потім буде прийнято рішення час від часу розробляти нові розумні пристрої з ідеальним поєднанням елементів, щоб задовольнити якомога більше клієнтів. Для розширення клієнтської бази через App Store буде розроблено аналогічний мобільний додаток для IOS. Мобільний додаток також дозволить користувачам перевіряти історію своїх замовлень.


2.5 Середовище оточення


Платформу Django буде використано для розробки серверного частини програмної системи. Фреймворк Django REST буде використовуватися для того, щоб зробити серверний API доступним для клієнта. В якості системи управління базами даних буде виступати PostgreSQL.
Аутентифікація за допомогою мережевих токенів виконується за допомогою Djoser. Відновлення резервних копій баз даних здійснюється за допомогою бібліотеки django-dbbackup, а перевірка сертифікатів - за допомогою бібліотеки django-sslserver. Клієнтська частина системи буде написана з використанням JavaScript для взаємодії з користувачем і генерації DOM-структури, HTML5 для верстки веб-сторінок, CSS3 і React для розробки односторінкових додатків. Клієнтський додаток вимагає Node.js. Axios використовуватиметься для створення запитів, а react-i18next забезпечуватиме інтернаціоналізацію та локалізацію. Контейнери Docker створюються як для клієнтської, так і для серверної частини системи. База даних також розміщується в контейнері. Мова програмування Kotlin використовується для створення мобільного додатку для Android-пристроїв. Запити до сервера здійснюються за допомогою бібліотеки Volley, а слайд-шоу, створені з фотографій, відображаються за допомогою Picasso. Схему розумного вибору їжі потрібно було розробити за допомогою скетчів, написаних на C з використанням бібліотек WiFi.h, HTTPClient.h для зв'язку з веб-сервером шляхом надсилання GET-запитів та GyverRGB.h для легкого керування RGB-світлодіодами. Програмна система повинна бути здатна обслуговувати до 10 000 клієнтів одночасно.


3 ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОДУКТУ
3.1  Проектування архітектури програмного забезпечення 


Серверна частина продукту буде розроблена з використанням веб-фреймворку Django. Django REST framework відповідатиме за надання API клієнту. Інформація, необхідна системі, зберігатиметься в PostgreSQL. Djoser забезпечуватиме автентифікацію за допомогою веб-токенів. Бібліотека Django-dbbackup відповідатиме за створення резервних копій баз даних та відновлення попередніх станів, а Django-sslserver - за моніторинг статусу сертифікатів. Клієнтська частина системи буде написана з використанням JavaScript для взаємодії з користувачем і генерації DOM-структури, HTML5 для верстки веб-сторінок, CSS3 і React для розробки односторінкових додатків. Клієнтський додаток вимагає Node.js. Axios використовуватиметься для створення запитів, а react-i18next забезпечуватиме інтернаціоналізацію та локалізацію. Контейнери Docker створюються як для клієнтської, так і для серверної частини системи. База даних також розміщується в контейнері. Мова програмування Kotlin використовується для створення мобільного додатку для Android-пристроїв. Запити до сервера здійснюються за допомогою бібліотеки Volley, а слайд-шоу, створені з фотографій, відображаються за допомогою Picasso. Схему розумного вибору їжі потрібно було розробити за допомогою скетчів, написаних на C з використанням бібліотек WiFi.h, HTTPClient.h для зв'язку з веб-сервером шляхом надсилання GET-запитів та GyverRGB.h для легкого керування RGB-світлодіодами. Програмна система повинна бути здатна обслуговувати до 10 000 клієнтів одночасно.


3.2 UML-проектування програмного забезпечення


Щоб візуалізувати та зрозуміти поведінку користувача під час використання додатку була створена UML-діаграма, яка зображена нижче на рисунку 3.1.

 
Рисунок 3.1 – Діаграма прецедентів розроблюваної системи


Люди, які безпосередньо працюють з системою — це, звичайно, працівники компанії з доставки їжі, користувачі з платними підписками або безкоштовними акаунтами, які працюють з системою для замовлення їжі, а також адміністратор, який наглядає за системою та відповідає за її функціональність. Функції керування системою повністю доступні адміністратору. Окрім резервного копіювання даних і відновлення їх у разі збою в роботі програми, адміністратор також відповідає за управління сертифікатами, тобто стежить за терміном дії SSL-сертифіката та оновлює його за необхідності. Однак головним завданням цієї людини є управління системними даними. Вона керує даними в таблицях бази даних, що включає додавання нових даних до таблиць, зміну старих таблиць, видалення непотрібних сутностей і перевірку всіх даних. Користувач з безкоштовним акаунтом може використовувати базові функції приготування їжі. Він може отримати доступ до меню конкретного ресторану, сканувавши QR-код в додатку для смартфона, встановленому в ресторані. Після того він може переглянути всі страви, які його цікавлять, використовуючи фільтри, сортування та пошук, дізнатися про них, ідентифікувати їх вміст і додати до свого кошика. Потім вони можуть обробити страви, які вже знаходяться в кошику, оформити замовлення і чекати на їх приготування і доступність відповідно до черги. Користувачі можуть шукати ресторани в певній місцевості, які можуть приготувати обрані ними страви, а також страви, приготовані з обраних ними інгредієнтів. Користувач, що має платну підписку може зробити онлайн-замовлення продуктів на певний період часу і має доступ до першої частини черги, де можуть чекати лише безкоштовні підписники. Сама компанія також комунікує з системою. Машина сповіщає менеджера, коли закінчуються певні інгредієнти, що дозволяє системі продовжувати надавати послуги користувачам. База даних, яку створили, зберігає всі дані, необхідні для повноцінної роботи вищеописаних операцій. Було використано систему управління базами даних PostgreSQL, а для налаштування моделей — Django ORM. Визначаючи класи та перелічуючи поля, які будуть містити відповідні таблиці, із зазначенням типів даних, що вказують на вміст полів, платформа Django дозволяє швидко створювати моделі даних. Після розробки концептуальної моделі була створена база даних і побудована ER-діаграма (див. рис. 3.2).


Рисунок 3.2 – ER-діагарма


На діаграмі можна побачити, що база даних містить в собі такі сутності:
-	заклад харчування (вказує, де клієнт може замовити їжу та надає інформацію про місцезнаходження);
-	вид торгового автомата (вказує на вид торгового автомата, який можна використовувати для приготування страви);
-	торгові автомати в закладі харчування (містить інформацію про місце розташування відповідного виду автомата);
-	страва (містить інформацію про страву, яку можна приготувати в ресторанах, підключених до системи);
-	страва, приготована на даному типі приладу (вказано, які страви можна приготувати на даному виді приладу залежно від його конструкції);
-	інгредієнти (компоненти, які розумний пристрій використовує для приготування їжі);
-	інгредієнт страви (вказується, які саме елементи використовуються під час приготування);
-	інгредієнти у замовленій страві (оскільки користувач може коригувати кількість інгредієнтів або перевіряти їх наявність, ця таблиця містить детальну інформацію про кожен інгредієнт у замовленні);
-	користувач (особа, уповноважена діяти від свого імені для виконання завдань, що вимагаються системою);
-	оцінка страви (з коментарями від користувача, який може опублікувати їх, щоб поділитися своєю думкою).
	Сутності в базі даних пов'язані між собою, гарантуючи взаємодію. Створюючи проміжні таблиці зі зв'язком 1:M, можна реалізувати зв'язки M:M:
-	тип автомата (у закладі може бути кілька автоматів, а в деяких закладах може бути один і той самий тип автоматів);
-	тип автомата — посуд (один тип автомата може працювати з різним посудом і готувати одну і ту ж страву на різних автоматах);
-	страва - інгредієнт (страва може містити кілька інгредієнтів, тоді як інша страва може використовувати той самий інгредієнт);
-	страва - користувач (один користувач може поставити оцінку кільком стравам, кілька страв можуть бути оціненими одним користувачем);
-	інгредієнт страви - користувач (користувач може замовити страви, що містять інгредієнти з декількох різних замовлень).
Діаграма розгортання була створена для візуалізації фізичної структури програмної системи. Вона відображає топологію, розподіл компонентів між вузлами та шляхи передачі інформації між цими вузлами (див. рис. 3.3).


Рисунок 3.3 – Діаграма розгортання


Система складається з сервера баз даних, на якому працює PostgreSQL, з'єднаного з внутрішнім сервером, що містить основну бізнес-логіку системи на основі веб-фреймворку Django і протоколу TCP/IP. Клієнти використовують протокол HTTP для надсилання запитів та отримання відповідей від внутрішнього сервера як у веб-додатку, так і в мобільному додатку. Браузер користувача також надсилає запити до зовнішнього сервера через протокол HTTP. Розумний пристрій отримує нові командні дані через HTTP. Діаграма станів призначена для представлення поведінки одного об'єкта в системі (див. рис. 3.4).


Рисунок 3.4 – Діаграма станів


Детально описано процес переходу з одного стану в інший, а також такі стани користувача, як "неактивований" та "активний". Стани, в яких перебуває об'єкт під час роботи системи, легко ідентифікувати, так само як і операції, які необхідно виконати для переходу з одного стану в інший. Архітектура програмної системи базується на моделі Model-View-Controller. Система зберігає дані у вигляді об'єктів, створюючи класи, поля яких відповідають стовпцям таблиць у базі даних. Ці класи перетворюються на таблиці за допомогою ORM, інтегрованого в структуру, а поля класів перетворюються на зв'язки між таблицями. Фреймворк Django REST використовується для надання API, через які інші компоненти системи можуть взаємодіяти з сервером додатку. Можливі функції користувацького інтерфейсу визначаються за допомогою представлень. Вони визначають як набір даних, які буде обробляти представлення, так і серіалізатор, який надасть дані у відповідному форматі. Дані моделі конвертуються у форматі JSON у представленні для передачі клієнту, оскільки цей формат дуже популярний і підтримується більшістю мов програмування. URL-адреси, що використовуються для доступу до різних представлень, визначаються маршрутизатором. У системі реалізовані JWT-токени для аутентифікації. До них відносяться токени доступу, які генеруються при введенні користувачем дійсних даних, зберігаються на стороні клієнта та надсилаються з кожним запитом у заголовку, а також токени поновлення, які дозволяють генерувати новий токен доступу, коли закінчується термін дії попереднього токена. Перевага цього методу автентифікації полягає в тому, що токени не потрібно зберігати на сервері і вони дуже безпечні, оскільки мають цифровий підпис. Можна вибрати як термін дії токену доступу, так і механізм шифрування, що використовується для створення токенів JWT. Було використано алгоритм HS256 із терміном дії 60 хвилин. Функції резервного копіювання та відновлення бази даних зі створених копій реалізовано для гарантування цілісності даних та відновлення системи у випадку аварійної ситуації. Для реалізації цих функцій використовується бібліотека django-dbbackup. Тепер доступні API, які при отриманні POST-запитів виконують відповідні процедури операційної системи чи то копіювання, чи відновлення. Коли процес завершено, користувач отримує відповідь із успішним статусом. Підтримується конфіденційність даних: після встановлення SSL-сертифікату доступ до клієнта можливий лише через захищене з'єднання. Розроблено API для управління сертифікатами, що дозволяє змінювати існуючий сертифікат за запитом. Реалізовано сповіщення для інформування адміністратора про необхідність оновлення сертифіката до закінчення терміну його дії. На стороні сервера бізнес-логіка, що лежить в основі системи, реалізує розумний підбір: вона обирає страви, які можна приготувати з відповідних інгредієнтів (див. Додаток А), і обирає місця, де можна приготувати обрані страви (див. Додаток Б). У параметрах GET-запиту користувач вказує інгредієнти, які мають бути присутні у страві, а також інгредієнти, яких не повинно бути. Це є частиною реалізації підбору страв. Алгоритм отримує список ідентифікаторів всіх страв, визначає кількість інгредієнтів у кожній страві та шукає розбіжності з вказаною користувачем кількістю інгредієнтів. Потім він визначає, чи відповідає страва критеріям пошуку, базуючись на кількості відсутніх інгредієнтів у кожній страві. Алгоритм генерує два списки: один містить страви з усіма зазначеними інгредієнтами, а другий — страви, що містять деякі з інгредієнтів, але не більше зазначеної кількості. Користувач обирає відповідні страви та вказує бажане місце розташування ресторану: країна, місто або вулиця, для пошуку закладів, які можуть приготувати обрані страви. Якщо кількість обраних користувачем страв є підмножиною страв, які можуть бути приготовані в закладі, вважається, що заклад відповідає критеріям пошуку. Алгоритм відбирає всі види автоматів, які можуть приготувати ці страви, отримує доступні автомати для кожного закладу і визначає, які з них у сукупності можуть приготувати потрібні страви. 


4 КОДУВАННЯ ПРОГРАМНОЇ СИСТЕМИ
4.1 Кодування серверної частини


Діаграма розгортання була створена для візуалізації фізичної структури програмної системи. Вона відображає топологію, розподіл компонентів між вузлами та шляхи передачі інформації між цими вузлами. Система складається з сервера баз даних, на якому працює PostgreSQL, з'єднаного з внутрішнім сервером, що містить основну бізнес-логіку системи на основі веб-фреймворку Django і протоколу TCP/IP. Клієнти використовують протокол HTTP для надсилання запитів та отримання відповідей від внутрішнього сервера як у веб-додатку, так і в мобільному додатку. Браузер користувача також надсилає запити до зовнішнього сервера через протокол HTTP. Розумний пристрій отримує нові командні дані через HTTP. Діаграма станів призначена для представлення поведінки одного об'єкта в системі. Детально описано процес переходу з одного стану в інший, а також такі стани користувача, як "неактивований" та "активний". Стани, в яких перебуває об'єкт під час роботи системи, легко ідентифікувати, так само як і операції, які необхідно виконати для переходу з одного стану в інший.


4.2 Кодування клієнтської частини


Веб-додаток було створено з використанням концепції односторінкових додатків, яка передбачає використання скриптів для зміни вмісту єдиного файлу тегів index.html, а не створення окремого файлу для кожної логічної сторінки сайту. Файл App.js відстежує поточну URL-адресу та визначає, який компонент React використовувати для рендерингу відповідного контенту веб-сторінки. Він відповідає за створення необхідного вмісту веб-сайту. Для надсилання HTTP-запитів до API на сервері деякі компоненти, такі як SignUp, Login, ProductCatalog, Recipe, RecipeSearch, IngredientForm, і RestaurantSearch, використовують можливості бібліотеки Axios. Файл App.css відповідає за глобальні стилі. Бібліотека i18next використовується для завдань локалізації та інтернаціоналізації. Заголовок і основний вміст веб-сайту створюються за допомогою компонентів Header і MainContent відповідно. У склад MainContent входять підкомпоненти. Адміністрування містить компоненти для сторінки адміністрування, такі як кнопки для відновлення бази даних, створення резервних копій, оновлення сертифікатів, а також компоненти для управління окремими таблицями бази даних. Пошук складається з частин, що здійснюють пошук сутностей у предметній області за обраними користувачем критеріями, наприклад, страви або заклади харчування. Каталог включає компоненти для відображення каталогу страв, які можуть бути приготовані в закладах харчування в рамках системи. Аутентифікація містить компоненти для реєстрації та авторизації користувачів. Наступні сторінки можна знайти на сайті:
-	перелік страв, що готуються в підключених до системи закладах, які можна занести до бази даних. На екрані відображається детальна інформація про кожну страву, включаючи назву, фото, тип, популярність і короткий опис. Ви можете здійснювати пошук по каталогу і фільтрувати результати за типом, популярністю і рейтингом. Залежно від назви, ви можете сортувати дані за зростанням або спаданням;
-	детальна інформація про страви, вибрані з меню. Вона включає назву, фото, інгредієнти, ціну та короткий опис, а також склад, тип і популярність обраних інгредієнтів. Зареєстровані користувачі можуть читати відгуки та залишати власні;
-	сторінка, на якій користувачі можуть шукати рецепти на основі вибраних інгредієнтів. На сайті є випадаючий список, а візуальне представлення списку показує, що при натисканні на елемент відповідний інгредієнт додається до обраного. Якщо ви натискаєте на нього ще раз, елемент вважається знятим з вибору. Також є поле, де ви можете ввести число, що вказує на потенційну кількість інгредієнтів, яких не вистачає у формі для випікання. При натисканні кнопки "Пошук" відображається мапа знайдених страв з такою інформацією, як назва, тип і фото.
-	фрагмент коду зі сторінки, який використовується для пошуку страв, що містять певні інгредієнти;
-	сторінка пошуку ресторанів, що пропонують обраний тип харчування. Доступний випадаючий список страв. Після натискання кнопки "Пошук" відображаються назви, адреси та фотографії знайдених закладів;
-	сторінка реєстрації, де відвідувачі можуть ввести свої персональні дані для доступу до сайту (логін і пароль, вимоги вказані тут), а потім увійти за цими даними;
-	Сторінка авторизації, де користувач вводить свій логін і пароль для входу на сайт;
-	Сторінка адміністратора для керування користувачами (додавання, видалення, оновлення особистих даних, відновлення паролів, призначення прав доступу до даних) та даними бази даних, що моделюють тему (додавання, зміна та видалення). Можливе відновлення бази даних з резервної копії, експорт та імпорт даних і налаштувань, а також міграція на інші платформи. Автоматичне резервне копіювання виконується щогодини та за запитом адміністратора (натисканням відповідної кнопки). Захист даних: за потреби оновлення SSL-сертифікату, адміністратор може перевірити, чи він ще дійсний. Локалізація та інтернаціоналізація підтримуються на кожній сторінці сайту. Деякі елементи інтерфейсу зберігаються в JSON-файлах, які використовуються бібліотекою i18next для відображення даних обраною мовою (українською або англійською). Кнопка для зміни мови знаходиться у верхній частині сторінки. Дата і час відображаються у форматі, специфічному для обраної мови, і розраховуються на основі поточного часового поясу. Є функція відображення ваги в одиницях різних країн: англійською мовою вага відображається у фунтах, а українською - у грамах. Відображення ціни в доларах або гривнях залежить від поточних мовних налаштувань; курс обміну визначається за допомогою HTTP-запиту до API ПриватБанку. Програмний комплекс має дворівневу, одношарову архітектуру, що включає рівень бізнес-логіки та рівень представлення даних. Рівень представлення забезпечує зручне для користувача відображення спеціалізованих даних, тоді як рівень бізнес-логіки виконує інтелектуальний пошук, розрахунок цін, конвертацію даних відповідно до вибраних мовних налаштувань та інші функції. Як приклад синглтонної моделі використовується клас RequestManager, який створюється як єдиний екземпляр у файлі App.js і доступний у властивостях підпорядкованих компонентів. У серверному компоненті програмної системи методи цього класу використовуються для формування HTTP-запитів.


4.3 Кодування мобільного додатку


Компонентна діаграма була складена для того, щоб показати розташування програмних частин, з яких складається система (див. Додаток Б). Вона показує, як кожен розроблений екранний клас імітує базовий клас. GeneralApplicationActivity містить функції, спільні для всіх екранів, такі як створення нового екрану, обробка токенів автентифікації, зміна мови інтерфейсу та зміна форматів відображення дати, валюти та одиниць ваги (завантаження з пам'яті, додавання до заголовка HTTP-запиту). Навігація в додатку здійснюється за допомогою ActivityWithTopMenu та ActivityWithoutTopMenu, залежно від статусу входу користувача. Всі екрани авторизації та реєстрації подібні до ActivityWithoutTopMenu і включають один пункт у верхньому меню програми: зміна мови. Всі інші кнопки, зарезервовані для зареєстрованих користувачів (наприклад, меню, конкретні страви, пошук ресторану, кошик і замовлення), також включають кнопку виходу і меню для переходу між екранами при взаємодії з рестораном. Для цього вони імітують клас ActivityWithTopMenu. Для різних екранів були розроблені допоміжні класи, які допомагають керувати їхнім вмістом. Наприклад, для класу каталогу страв були розроблені класи UnfoldingItem та UnfoldingRatingInterval для управління фрагментами, що використовуються для визначення параметрів фільтрації, а клас DishComparator був створений для реалізації порівняння страв між собою та впорядкування їх за заданим критерієм. Клас під назвою RequestManager відправляє запити та отримує різні формати даних, включаючи таблиці та JSON-об'єкти, для запитів, що надсилаються на сервер. Цей клас використовує функції з бібліотеки Volley. Класи CartDish, CartDishIngredient, DishCatalogItem та Ingredient розроблені для зберігання інформації, отриманої від сервера у форматі, що відповідає об'єкту — інформації про страву в каталозі, інгредієнт цієї страви, страву в каталозі та інгредієнт, який вона містить. Файли .xml, що містять макети екранів, пов'язані з класами діяльності та різними частинами програми, забезпечують прозору передачу відповідних даних. Рекомендується використовувати подання для певних екранів, оскільки вони часто потребують однакових елементів управління та відображення. Ці подання також описані у файлах .xml і складаються з набору попередньо визначених елементів. Один звіт може відображатися через подання, зокрема report.xml, але для складніших інтерфейсів можуть використовуватися кілька подань, що дозволяє використовувати макет цього файлу для забезпечення єдиного стилю відображення. Пакет Fragments управляє різноманітністю фрагментів, які можна використовувати на різних екранах. У пакеті Data Classes зберігаються класи, що описують дані тем чітко і концисно, а також інтерфейси, які потрібно реалізувати. Пакет Actions включає наступні підпакети: Authentication для управління авторизацією та реєстрацією користувачів, Basic з основними класами параметрів для всіх екранів та загальними функціями, Catalog для взаємодії з каталогом і окремими стравами, Dish Ordering для вибору страв для замовлення та відстеження інформації про замовлення, та Search для пошуку страв і закладів харчування.  Реалізовано наступні екрани:
-	сторінка входу, де користувачі вводять свої персональні дані (ім'я та пароль) для входу та використання мобільного додатку;
-	сторінка реєстрації, де користувачі вводять свої персональні дані з метою реєстрації;
-	перелік страв, що подаються в закладі, який відвідав користувач. Кожен заклад має назву, фотографію, рейтинг та короткий опис. Каталог можна переглядати та фільтрувати за популярністю, типом страви та рейтингом. Дані можна сортувати в алфавітному порядку, за зростанням або спаданням;
-	детальна інформація про страви, вибрані з меню. Вона включає назву, фото, ціну, повний опис, інформацію про інгредієнти та їхню оцінку. Після первинного відображення вмісту основного інгредієнта можна змінити його, одразу побачити ціну страви та додати її до кошика. Авторизовані користувачі можуть читати відгуки, додавати свої і бачити, хто і коли написав той чи інший відгук;
-	пошук страв, що містять певні інгредієнти. Користувачі можуть вибирати інгредієнти зі списку, які автоматично додаються до пошукового запиту. Є можливість вказати, скільки інгредієнтів не повинно бути присутніми у знайдених стравах. Результати пошуку відображаються у вигляді слайд-шоу з назвами страв. Користувачі можуть переглядати детальну інформацію про кожну знайдену страву, включаючи назву, фото, ціну, повний опис, інформацію про інгредієнти та їхню оцінку. Авторизовані користувачі можуть читати відгуки і залишати свої коментарі про страви;
-	доступний пошук ресторанів за наявністю обраних страв. Користувач обирає страви зі списку, вводить їх назви, і після натискання кнопки "Пошук" відображається слайд-шоу знайдених ресторанів, де можна скуштувати ці страви. Кожен ресторан відображається з назвою та можливістю переглянути додаткову інформацію, таку як місцезнаходження, контактні дані та рейтинг;
-	кошик, де ви можете побачити товари, обрані для майбутнього замовлення, та їхній вміст. Тут ви можете видалити непотрібні товари з кошика і перейти до оформлення замовлення. Після того, як ви внесли зміни до вмісту кошика, натисніть відповідну кнопку, щоб зберегти нові дані.
-	перегляд поточних замовлень від клієнтів у ресторані. Ви можете перевірити статус замовлення, який включає інформацію про склад, хід приготування, номер у черзі та підтвердження отримання замовлення після приготування. Кожне замовлення має можливість відстежувати його стан та отримувати актуальну інформацію про процес його виконання. Кожен екран програми підтримує локалізацію та інтернаціоналізацію, завдяки ресурсним файлам з перекладом елементів інтерфейсу для української та англійської мов. Дата і час відображаються у форматі, специфічному для обраної мови та поточного часового поясу. Функція відображення ваги підтримує специфічні одиниці виміру для різних країн: українська мова показує вагу в грамах, англійська — в фунтах. Ціна в кошику також автоматично переключається між доларами та гривнями залежно від мовних налаштувань користувача. Програмний комплекс має дворівневу, одношарову архітектуру, що включає рівень бізнес-логіки та рівень представлення даних. Рівень представлення забезпечує зручне для користувача відображення спеціалізованих даних, тоді як рівень бізнес-логіки виконує інтелектуальний пошук, розрахунок цін, конвертацію даних відповідно до вибраних мовних налаштувань та інші функції. Як приклад синглтонної моделі використовується клас RequestManager. У серверному компоненті програмної системи методи цього класу використовуються для формування HTTP-запитів.


5 ОПИС РОЗРОБЛЕНОЇ ПРОГРАМНОЇ СИСТЕМИ
5.1 Опис серверної частини


Система використовує протокол HTTP для передачі даних, при цьому дані трансформуються у формат JSON для полегшення відправку та отрмання інформації. Установлені API надають користувачам можливість взаємодіяти з даними через такі методи HTTP-запитів як GET (отримання даних), POST (створення нових даних), PUT (повне оновлення існуючих даних), PATCH (часткове оновлення існуючих даних) та DELETE (видалення даних). Swagger використовується для створення документації серверної частини. У таблиці 5.1 наведено, яким чином можна здійснити виконання запитів до серверної частини для кожної із сутностей.


Таблиця 5.1 – Специфікація REST
Зареєстрований користувач, адміністратор	/establishment				GET		Повертає перелік закладів у межах системи
Зареєстрований користувач, адміністратор	/establishment/{id}			GET		Повертає заклад із заданим ідентифікатором
Адміністратор								/establishment				POST	Додавання нового ресторану до системи
Адміністратор								/establishment/{id}			PUT		Заміна даних про ресторан
Адміністратор								/establishment/{id}			DELETE	Видалення даних про ресторан
Зареєстрований користувач, адміністратор	/dish						GET		Повертає перелік страв у межах системи
Зареєстрований користувач, адміністратор	/dish/{id}					GET		Повертає страву із заданим ідентифікатором
Адміністратор								/dish						POST	Додавання нової страви до системи
Адміністратор								/dish/{id}					PUT		Редагування даних про страву
Адміністратор								/dish/{id}					DELETE	Вилучення даних про страву
Зареєстрований користувач, адміністратор	/ingredient					GET		Повертає перелік інгредієнтів у межах системи
Зареєстрований користувач, адміністратор	/ingredient/{id}			GET		Повертає інгредієнт із заданим ідентифікатором
Адміністратор								/ingredient					POST	Додавання нового інгредієнту до системи
Адміністратор								/ingredient/{id}			PUT		Редагування даних про інгредієнт
Адміністратор								/ingredient/{id}			DELETE	Вилучення даних про інгредієнт
Зареєстрований користувач, адміністратор	/user						GET		Повертає перелік користувачів у межах системи
Зареєстрований користувач, адміністратор	/establishments_with_dishes	GET		Надає перелік закладів, які можуть приготувати їжу
Зареєстрований користувач, адміністратор	/establishment_dish/{id}	GET		Повертає перелік страв, що можуть бути замовлені


REST API використовується для реалізації кожної адреси.


5.2 Опис web-застосунку 
 

Веб-додаток було створено з використанням концепції односторінкових додатків, яка передбачає використання скриптів для зміни вмісту єдиного файлу тегів index.html, а не створення окремого файлу для кожної логічної сторінки сайту. Інтерфейс простий і приємний у використанні для всіх типів користувачів.


ВИСНОВКИ


Результатом курсової роботи стало створення програмної системи для попереднього замовлення їжі та напоїв. Дві складові — сервер та веб-сайт. Серверна частина продукту була розроблена з використанням веб-фреймворку Django. Django REST framework відповідає за надання API клієнту. Інформація, необхідна системі, збережена в PostgreSQL. Клієнтська частина системи була написана з використанням JavaScript для взаємодії з користувачем і генерації DOM-структури, HTML5 для верстки веб-сторінок, CSS3 і React для розробки односторінкових додатків. Axios використовувався для створення запитів, а бібліотека react-i18next забезпечувала інтернаціоналізацію та локалізацію. Мова програмування Kotlin використовувалася для створення мобільного додатку для Android-пристроїв. Запити до сервера здійснювалися за допомогою бібліотеки Volley. Схема розумного вибору їжі була розроблена за допомогою скетчів, написаних на C з використанням бібліотек WiFi.h, HTTPClient.h для зв'язку з веб-сервером шляхом надсилання GET-запитів та GyverRGB.h для легкого керування RGB-світлодіодами. У відповідь на дослідження в цій галузі були встановлені бізнес вимоги. Крім того, була розроблена масштабована і легко розширювана архітектура системи [6], яка взаємодіє через Інтернет. Результати роботи можуть бути використані як основа для подальшого вдосконалення системи і її впровадження в реальних умовах. Розробка програмного забезпечення тепер відбувається відповідно до рекомендацій щодо написання програмного коду. Це означає, що проект готовий до подальшого розвитку, впровадження та додавання нових функцій у майбутніх версіях.